TextureManager
{
  DBG = TRUE

  ###
  ### TEXTURE LOADING
  ###

  ### Section for global settings
  //  Sets how the shader filters textures. Options are:
  //   Point     - No filtering is done. Nearest pixel is
  //               selected. Results in a pixelated" object.
  //               Good for GUIs and other 2D applications
  //   Bilinear  - Linear interpolation is performed beween
  //               pixels on the nearest mipmap.
  //               This is what KSP uses by default.
  //   Trilinear - Same as bilinear but smooth transitions
  //               between mipmaps.
  filter_mode = Trilinear

  //  Offload the texture from RAM into Graphics memory.
  //   this will mean the textures cannot be sampled by
  //   the scripts, but saves a LOT of memory. MBMs are
  //   not readable by default.
  make_not_readable = true

  ### Section for non-normalmapped textures
  // Normal mapped textures are flagged as normal in MBMs,
  // the file names end in _NRM, or are called out as such
  // in the config files.

  //  Compression flag. Compress all textures that
  //   can be. This includes textures in packs that don't
  //   have config files. Will reduce quality slightly.
  //   Not recomended for normal maps.
  compress = true

  //  Generate mipmaps. Mipmaps add smaller, filtered versions
  //   of the texture for use at a distance. Adds ~30% more
  //   memory. Well worth it on visual textures.
  mipmaps = true

  //  Resize the texture by the scale specified. Use powers
  //   of two for best efficiency. 1 is no scalling, 2, is 1/2
  //   4 is 1/4, etc.
  scale = 1

  //  Specifies a maximum dimension for both width and height
  //   of textures, AFTER any scalling. ie. if this is set to
  //   256, and you have a 1024X1024 texture and scale set to 2,
  //   the resulting texture will be 256x256. Use it without
  //   scalling to only shrink larger textures.
  max_size = 0

  ### Section for normalmapped textures. Same as above, but
  ###  apply only to normal maps.
  compress_normals = true
  mipmaps_normals = true
  scale_normals = 1
  max_size_normals = 0

  OVERRIDES
  {
    .*/Flags/.*
    {
      compress = true
      mipmaps = false
      scale = 1
      max_size = 0
    }

    .*/FX/.*
    {
      compress = true
      mipmaps = true
    }

    .*/Parts/.*
    {
      compress = true
      mipmaps = true
    }

    .*/Props/.*
    {
      compress = true
      mipmaps = true
      scale = 1
      max_size = 0
    }

    .*/Spaces/.*
    {
      compress = true
      mipmaps = true
      scale = 1
      max_size = 0
    }

    TextureManager/EnvMap/.*
    {
      compress = true
      mipmaps = true
      make_not_readable = false
    }

    TextureManager/.*
    {
      compress = true
      mipmaps = true
    }
  }

  // Specific sections can be added in config files
  // to allow specifc behaviour. Examples shown are from
  // Squad.cfg and BoulderCo.cfg.
  //
  // Some mods don't mark normal map textures properly,
  // which can cause part errors.
  // Specify the textures to be treaded as normal maps:
  //
  // NORMAL_LIST
  // {
  //   texture = Squad/Spaces/mk1CockpitInternal/model002
  //   texture = Squad/Spaces/mk1CockpitInternal/model004
  //   texture = Squad/Parts/FuelTank/RCSTank1-2/model001
  //   texture = Squad/Parts/Aero/winglet2/model001
  // }
  //
  // Override a specific file/folder using regexes(useful for flag/GUI folders)
  // If any of the fields are ommitted, it is replaced by the global settings:
  //
  // OVERRIDES
  // {
  //   .*/Flags/.*
  //   {
  //     compress = true
  //     mipmaps = false
  //     scale = 1
  //     max_size = 0
  //     compress_normals = false
  //     mipmaps_normals = false
  //     scale_normals = 1
  //     max_size_normals = 0
  //     filtering = Bilinear
  //     make_not_readable = true
  //   }
  // }
  //

  ###
  ### KERBAL CUSTOMISATION
  ###

  // Replace helmet visor shader to support reflections (EVA only).
  isVisorReflectionEnabled = true

  // Reflection colour. Reflection is multiplied by this RGB colour before it is
  // added to the visor colour.
  visorReflectionColour = 1 1 1

  // Spawn a Kerbal on EVA in his/her IVA suit without helmet and jetpack when
  // in breathable atmosphere (oxygen + sufficent pressure).
  isAtmSuitEnabled = true

  // Minimum air pressure required for a Kerbal to spawn in his/her IVA suit.
  atmSuitPressure = 0.5

  CustomKerbals
  {
    // Custom heads and suits for specific Kerbals. Entries are of the form:
    //
    //   Name = headTex [suitDir]
    //
    // where `headTex` is an image (without extension) inside `Heads/` and
    // `suitDir` is a subdirectory inside `Suits/` containing textures for a
    // suit. `DEFAULT` keeps the default head/suit textures from `Default/` and
    // `GENERIC` assigns a generic head/suit using the same rules as for the
    // generic Kerbals. If `suitDir` is missing then `GENERIC` is assumed.
    //
    // Examples:
    //
    //   Huey Kerman    = head1 Suit1
    //   Dewey Kerman   = head2 DEFAULT
    //   Louie Kerman   = head3
    //   Donald Kerman  = DEFAULT DEFAULT
    //   Daisy Kerman   = DEFAULT
    //   Scrooge Kerman = GENERIC Suit2
    //
  }

  GenericKerbals
  {
    // Prevent the following heads from being assigned to generic Kerbals.
    // The list must be space- and/or comma-separated.
    excludedHeads =

    // Prevent the following suits from being assigned to generic Kerbals.
    // The list must be space- and/or comma-separated.
    excludedSuits =

    // Female heads. Those will only be paired with female suits.
    // The list must be space- and/or comma-separated.
    femaleHeads =

    // Female suits. Those will only be paired with female heads.
    // The list must be space- and/or comma-separated.
    femaleSuits =

    // Eye-less heads. Eyes will be hidden for those heads, so one can paint
    // custom ones on the head texture.
    // The list must be space- and/or comma-separated.
    eyelessHeads =

    // Whether generic suits should be assigned pseudo-randomly based on a
    // Kerbal's name's hash or consecutively based on a Kerbal's position in
    // the global roster.
    // Possible options: `random` or `consecutive`.
    suitAssignment = random
  }

  CabinSuits
  {
    // Cabin-specific suits. These are enforced even if a Kerbal has a custom
    // suit. Entries are of the form:
    //
    //   partName = suitDir
    //
    // where `partName` is the name of a part (`name = ...` in `part.cfg`) and
    // `suitDir` is either a suit directory from `Suits/` or `DEFAULT`.
    //
    // Examples:
    //
    //   Mark1Cockpit = PilotSuit
    //   crewCabin = DEFAULT
    //
  }
}
